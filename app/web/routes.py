from fastapi import APIRouter, Depends, HTTPException, Request, Form
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates
from sqlalchemy.ext.asyncio import AsyncSession
from typing import Optional
import datetime
import logging
import json

from app.database import get_db
from app.database.crud import (
    get_user_by_telegram_id, create_user, get_all_rooms, get_room,
    get_available_rooms, create_booking, get_user_bookings
)
from app.bot.utils import calculate_booking_price
from app.config import BOT_TOKEN, ADMIN_TELEGRAM_ID

router = APIRouter()
templates = Jinja2Templates(directory="app/web/templates")
logger = logging.getLogger(__name__)


@router.get("/webapp", response_class=HTMLResponse)
async def webapp(request: Request, room_id: Optional[int] = None, db: AsyncSession = Depends(get_db)):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    context = {
        "request": request,
        "room_id": room_id
    }

    if room_id:
        room = await get_room(db, room_id)
        if room:
            context["room"] = room

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    rooms = await get_all_rooms(db)
    context["rooms"] = rooms

    return templates.TemplateResponse("index.html", context)


@router.get("/api/rooms")
async def get_rooms(db: AsyncSession = Depends(get_db)):
    """API-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º await –∑–¥–µ—Å—å
        rooms = await get_all_rooms(db)

        return {
            "success": True,
            "rooms": [
                {
                    "id": room.id,
                    "name": room.name,
                    "description": room.description,
                    "type": room.room_type,
                    "price": room.price_per_night,
                    "weekend_price": room.weekend_price if hasattr(room,
                                                                   "weekend_price") and room.weekend_price else None,
                    "capacity": room.capacity,
                    "available": room.is_available,
                    "image_url": room.image_url
                }
                for room in rooms
            ]
        }
    except Exception as e:
        logger.error(f"Error getting rooms: {e}")
        return {"success": False, "detail": str(e)}


@router.get("/api/rooms/{room_id}")
async def get_room_details(room_id: int, db: AsyncSession = Depends(get_db)):
    """API-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –Ω–æ–º–µ—Ä–µ"""
    room = await get_room(db, room_id)
    if not room:
        raise HTTPException(status_code=404, detail="Room not found")

    # –ü–∞—Ä—Å–∏–º JSON-–ø–æ–ª—è
    amenities = []
    photos = []

    if room.amenities:
        try:
            amenities = json.loads(room.amenities)
        except:
            amenities = []

    if room.photos:
        try:
            photos = json.loads(room.photos)
        except:
            photos = []

    return {
        "success": True,
        "room": {
            "id": room.id,
            "name": room.name,
            "description": room.description,
            "type": room.room_type,
            "price": room.price_per_night,
            "weekend_price": room.weekend_price if hasattr(room, "weekend_price") and room.weekend_price else None,
            "capacity": room.capacity,
            "available": room.is_available,
            "image_url": room.image_url,
            "photos": photos,
            "video_url": room.video_url,
            "amenities": amenities
        }
    }


@router.post("/api/calculate-price")
async def calculate_price(
        room_id: int = Form(...),
        check_in: str = Form(...),
        check_out: str = Form(...),
        guests: int = Form(...),
        db: AsyncSession = Depends(get_db)
):
    """API-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        check_in_date = datetime.datetime.strptime(check_in, "%Y-%m-%d")
        check_out_date = datetime.datetime.strptime(check_out, "%Y-%m-%d")
    except ValueError:
        raise HTTPException(status_code=400, detail="Invalid date format")

    if check_in_date >= check_out_date:
        raise HTTPException(status_code=400, detail="Check-out date must be after check-in date")

    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è calculate_booking_price –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –¥–∞—Ç–∞–º–∏
    price = await calculate_booking_price(db, room_id, check_in, check_out, guests)
    if price is None:
        raise HTTPException(status_code=400, detail="Could not calculate price")

    return {
        "success": True,
        "price": price,
        "nights": (check_out_date - check_in_date).days
    }


@router.post("/api/book")
async def book_room(
        telegram_id: int = Form(...),
        room_id: int = Form(...),
        check_in: str = Form(...),
        check_out: str = Form(...),
        guests: int = Form(...),
        phone: Optional[str] = Form(None),
        db: AsyncSession = Depends(get_db)
):
    """API-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_telegram_id(db, telegram_id)
        if not user:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            user = await create_user(db, telegram_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä
        room = await get_room(db, room_id)
        if not room:
            raise HTTPException(status_code=404, detail="Room not found")

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã
        try:
            check_in_date = datetime.datetime.strptime(check_in, "%Y-%m-%d").date()
            check_out_date = datetime.datetime.strptime(check_out, "%Y-%m-%d").date()
        except ValueError:
            raise HTTPException(status_code=400, detail="Invalid date format")

        # –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        booking = await create_booking(
            db=db,
            user_id=user.id,
            room_id=room_id,
            check_in=check_in,
            check_out=check_out,
            guests=guests,
            phone=phone
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
        try:
            from aiogram import Bot
            if ADMIN_TELEGRAM_ID and BOT_TOKEN:
                bot = Bot(token=BOT_TOKEN)

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                booking_info = (
                    f"üìù *–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #{booking.id}*\n\n"
                    f"üõèÔ∏è –ù–æ–º–µ—Ä: {room.name}\n"
                    f"üìÖ –ó–∞–µ–∑–¥: {check_in_date.strftime('%d.%m.%Y')}\n"
                    f"üìÖ –í—ã–µ–∑–¥: {check_out_date.strftime('%d.%m.%Y')}\n"
                    f"üë• –ì–æ—Å—Ç–µ–π: {guests}\n"
                    f"‚è± –ù–æ—á–µ–π: {(check_out_date - check_in_date).days}\n"
                    f"üí∞ –°—É–º–º–∞: {booking.total_price}‚ÇΩ\n\n"
                    f"üì± –ö–æ–Ω—Ç–∞–∫—Ç: {phone if phone else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username if user.username else f'@{telegram_id}'}"
                )

                await bot.send_message(
                    chat_id=ADMIN_TELEGRAM_ID,
                    text=booking_info,
                    parse_mode="Markdown"
                )

                # –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω
                booking.admin_notified = True
                await db.commit()
                logger.info(f"Admin notification for booking #{booking.id} sent successfully")

        except Exception as e:
            logger.error(f"Error sending admin notification: {e}")
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å

        return {
            "success": True,
            "booking_id": booking.id,
            "message": "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!"
        }
    except ValueError as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ create_booking
        raise HTTPException(status_code=400, detail=str(e))
    except Exception as e:
        logger.error(f"Error creating booking: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/api/user/{telegram_id}/bookings")
async def get_user_all_bookings(telegram_id: int, db: AsyncSession = Depends(get_db)):
    """API-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await get_user_by_telegram_id(db, telegram_id)
    if not user:
        raise HTTPException(status_code=404, detail="User not found")

    bookings = await get_user_bookings(db, user.id)
    return {
        "success": True,
        "bookings": [
            {
                "id": booking.id,
                "room_name": booking.room.name,
                "check_in": booking.check_in.strftime("%Y-%m-%d"),
                "check_out": booking.check_out.strftime("%Y-%m-%d"),
                "guests": booking.guests,
                "total_price": booking.total_price,
                "status": booking.status,
                "created_at": booking.created_at.strftime("%Y-%m-%d %H:%M") if booking.created_at else ""
            }
            for booking in bookings
        ]
    }