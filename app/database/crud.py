async def get_all_rooms():
    # Return list of rooms with basic info
    # Example:
    return [
        {"id": 1, "name": "Стандартный номер", "description": "Уютный стандартный номер с видом на горы.",
         "price": 3000, "image_url": "/static/images/standard.jpg"},
        {"id": 2, "name": "Люкс", "description": "Просторный номер люкс с отдельной гостиной.", "price": 5000,
         "image_url": "/static/images/luxury.jpg"},
        {"id": 3, "name": "Семейный номер", "description": "Большой номер для всей семьи.", "price": 7000,
         "image_url": "/static/images/family.jpg"},
        {"id": 4, "name": "Президентский люкс", "description": "Наш лучший номер с панорамным видом.", "price": 12000,
         "image_url": "/static/images/presidential.jpg"}
    ]


async def get_user_bookings(user_id):
    # Return bookings for specific user
    # Example:
    return [
        {"id": 1, "room_name": "Стандартный номер", "check_in": "2025-04-01", "check_out": "2025-04-03", "guests": 2,
         "total_price": 6000, "status": "confirmed"}
    ]


async def calculate_booking_price(room_id, check_in, check_out):
    # Calculate total price for a booking
    from datetime import datetime

    # Find room price
    rooms = await get_all_rooms()
    room = next((r for r in rooms if r["id"] == room_id), None)
    if not room:
        raise ValueError("Room not found")

    # Calculate number of nights
    date_format = "%Y-%m-%d"
    check_in_date = datetime.strptime(check_in, date_format)
    check_out_date = datetime.strptime(check_out, date_format)
    nights = (check_out_date - check_in_date).days

    if nights <= 0:
        raise ValueError("Check-out date must be after check-in date")

    total_price = room["price"] * nights

    return {"total_price": total_price, "nights": nights}


async def create_booking(telegram_id, room_id, check_in, check_out, guests, phone=None):
    # Create a new booking
    # In a real implementation, this would save to database

    # Calculate price first
    price_info = await calculate_booking_price(room_id, check_in, check_out)

    # Create booking object (simulated)
    booking = {
        "id": 12345,  # Would be generated by the database
        "telegram_id": telegram_id,
        "room_id": room_id,
        "check_in": check_in,
        "check_out": check_out,
        "guests": guests,
        "phone": phone,
        "total_price": price_info["total_price"],
        "status": "pending"
    }

    return booking