# app/bot/ai_assistant.py

from typing import Dict, List, Optional
import json
from datetime import datetime, timedelta


class OqtoshsoyAssistant:
    """–£–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø–æ–º–æ—â–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""

    def __init__(self):
        self.faq = {
            "–ø–∞—Ä–∫–æ–≤–∫–∞": "üöó –£ –Ω–∞—Å –µ—Å—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –æ—Ö—Ä–∞–Ω—è–µ–º–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞ –Ω–∞ 50 –º–µ—Å—Ç",
            "–ø–∏—Ç–∞–Ω–∏–µ": "üçΩ –ó–∞–≤—Ç—Ä–∞–∫ –≤–∫–ª—é—á–µ–Ω –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å. –û–±–µ–¥ –∏ —É–∂–∏–Ω - –ø–æ –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞",
            "—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä": "üöå –û—Ä–≥–∞–Ω–∏–∑—É–µ–º —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä –∏–∑ –¢–∞—à–∫–µ–Ω—Ç–∞ –∑–∞ 500,000 —Å—É–º –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã",
            "–¥–µ—Ç–∏": "üë∂ –î–µ—Ç–∏ –¥–æ 5 –ª–µ—Ç - –±–µ—Å–ø–ª–∞—Ç–Ω–æ. –ï—Å—Ç—å –¥–µ—Ç—Å–∫–∞—è –ø–ª–æ—â–∞–¥–∫–∞ –∏ –∞–Ω–∏–º–∞—Ç–æ—Ä—ã",
            "–±–∞—Å—Å–µ–π–Ω": "üèä –û—Ç–∫—Ä—ã—Ç—ã–π –±–∞—Å—Å–µ–π–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –º–∞—è –ø–æ –æ–∫—Ç—è–±—Ä—å, –∫—Ä—ã—Ç—ã–π - –∫—Ä—É–≥–ª—ã–π –≥–æ–¥",
            "wi-fi": "üì∂ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π Wi-Fi –Ω–∞ –≤—Å–µ–π —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –∫—É—Ä–æ—Ä—Ç–∞",
            "–∂–∏–≤–æ—Ç–Ω—ã–µ": "üêï –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ",
            "–æ–ø–ª–∞—Ç–∞": "üí≥ –ü—Ä–∏–Ω–∏–º–∞–µ–º –Ω–∞–ª–∏—á–Ω—ã–µ, –∫–∞—Ä—Ç—ã Uzcard/Humo, –ø–µ—Ä–µ–≤–æ–¥—ã",
            "–æ—Ç–º–µ–Ω–∞": "‚ùå –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –∑–∞ 48 —á–∞—Å–æ–≤ –¥–æ –∑–∞–µ–∑–¥–∞",
            "–¥–æ–∫—É–º–µ–Ω—Ç—ã": "üìÑ –ù—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –ø–∞—Å–ø–æ—Ä—Ç –∏–ª–∏ ID-–∫–∞—Ä—Ç–∞"
        }

        self.recommendations = {
            "—Ä–æ–º–∞–Ω—Ç–∏–∫–∞": ["–õ—é–∫—Å 2-—Ö –º–µ—Å—Ç–Ω—ã–π", "VIP –Ω–æ–º–µ—Ä–∞"],
            "—Å–µ–º—å—è": ["–°—Ç–∞–Ω–¥–∞—Ä—Ç 4-—Ö –º–µ—Å—Ç–Ω—ã–π", "–ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç", "–ö–æ—Ç—Ç–µ–¥–∂"],
            "–∫–æ–º–ø–∞–Ω–∏—è": ["–ö–æ—Ç—Ç–µ–¥–∂ 6-–º–µ—Å—Ç–Ω—ã–π", "–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏–π –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç", "–¢–∞–ø—á–∞–Ω—ã"],
            "—ç–∫–æ–Ω–æ–º": ["–°—Ç–∞–Ω–¥–∞—Ä—Ç 2-—Ö –º–µ—Å—Ç–Ω—ã–π", "–¢–∞–ø—á–∞–Ω—ã"],
            "–ø—Ä–µ–º–∏—É–º": ["–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏–π –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç", "VIP –Ω–æ–º–µ—Ä–∞"]
        }

    def process_question(self, text: str) -> Dict[str, any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        text_lower = text.lower()

        # –ü–æ–∏—Å–∫ –≤ FAQ
        for key, answer in self.faq.items():
            if key in text_lower:
                return {
                    "type": "faq",
                    "answer": answer,
                    "suggestions": self._get_related_questions(key)
                }

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–æ–≤
        for category, rooms in self.recommendations.items():
            if category in text_lower:
                return {
                    "type": "recommendation",
                    "rooms": rooms,
                    "reason": f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –¥–ª—è {category}"
                }

        # –í–æ–ø—Ä–æ—Å—ã –æ –¥–∞—Ç–∞—Ö
        if any(word in text_lower for word in ["–∫–æ–≥–¥–∞", "—Å–≤–æ–±–æ–¥–Ω–æ", "–¥–∞—Ç—ã", "–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å"]):
            return {
                "type": "availability",
                "action": "check_dates"
            }

        # –í–æ–ø—Ä–æ—Å—ã –æ —Ü–µ–Ω–∞—Ö
        if any(word in text_lower for word in ["—Ü–µ–Ω–∞", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—Å–∫–æ–ª—å–∫–æ"]):
            return {
                "type": "pricing",
                "action": "show_prices"
            }

        return {
            "type": "unknown",
            "suggestions": [
                "üè® –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–º–µ—Ä–∞",
                "üìÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å",
                "üí∞ –£–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã",
                "‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
            ]
        }

    def _get_related_questions(self, topic: str) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"""
        related = {
            "–ø–∞—Ä–∫–æ–≤–∫–∞": ["–ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è?", "–ï—Å—Ç—å –ª–∏ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä?"],
            "–ø–∏—Ç–∞–Ω–∏–µ": ["–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ –≤ –∑–∞–≤—Ç—Ä–∞–∫?", "–†–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω?"],
            "–¥–µ—Ç–∏": ["–ï—Å—Ç—å –ª–∏ –¥–µ—Ç—Å–∫–æ–µ –º–µ–Ω—é?", "–†–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –∞–Ω–∏–º–∞—Ç–æ—Ä?"]
        }
        return related.get(topic, [])

    def get_personalized_greeting(self, user_name: str, time_of_day: str) -> str:
        """–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
        greetings = {
            "morning": f"üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {user_name}! –ü–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –æ—Ç–¥—ã—Ö –≤ –≥–æ—Ä–∞—Ö?",
            "afternoon": f"‚òÄÔ∏è –î–æ–±—Ä—ã–π –¥–µ–Ω—å, {user_name}! –°–∞–º–æ–µ –≤—Ä–µ–º—è –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–¥—ã—Ö!",
            "evening": f"üåô –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä, {user_name}! –ú–µ—á—Ç–∞–µ—Ç–µ –æ –≥–æ—Ä–Ω–æ–º –≤–æ–∑–¥—É—Ö–µ?",
            "night": f"üåÉ –î–æ–±—Ä–æ–π –Ω–æ—á–∏, {user_name}! –ü–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –æ—Ç–¥—ã—Ö –∑–∞—Ä–∞–Ω–µ–µ?"
        }
        return greetings.get(time_of_day, f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–º–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
@router.message(F.text.startswith("?") | F.text.startswith("–í–æ–ø—Ä–æ—Å:"))
async def ai_assistant_handler(message: Message, session: AsyncSession):
    assistant = OqtoshsoyAssistant()

    # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
    question = message.text.lstrip("?").lstrip("–í–æ–ø—Ä–æ—Å:").strip()

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å
    result = assistant.process_question(question)

    if result["type"] == "faq":
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ FAQ
        keyboard = []
        for suggestion in result.get("suggestions", []):
            keyboard.append([InlineKeyboardButton(
                text=suggestion,
                callback_data=f"ask_{suggestion[:20]}"
            )])
        keyboard.append([InlineKeyboardButton(
            text="üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º",
            callback_data="contact_manager"
        )])

        await message.answer(
            f"{result['answer']}\n\n"
            f"–ï—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

    elif result["type"] == "recommendation":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
        rooms = await get_all_rooms(session)
        recommended = [r for r in rooms if r.name in result["rooms"]]

        text = f"üéØ {result['reason']}:\n\n"
        keyboard = []

        for room in recommended[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3
            text += f"‚Ä¢ {room.name} - –æ—Ç {room.price_per_night:,} —Å—É–º\n"
            keyboard.append([InlineKeyboardButton(
                text=f"üëÅ {room.name}",
                callback_data=f"room_{room.id}"
            )])

        keyboard.append([InlineKeyboardButton(
            text="üìã –í—Å–µ –Ω–æ–º–µ—Ä–∞",
            callback_data="all_rooms"
        )])

        await message.answer(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

    elif result["type"] == "availability":
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—ã
        await message.answer(
            "üìÖ –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–æ–≤.\n"
            "–ù–∞ –∫–∞–∫–∏–µ –¥–∞—Ç—ã –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –æ—Ç–¥—ã—Ö?",
            reply_markup=generate_calendar_keyboard(
                datetime.now().year,
                datetime.now().month
            )
        )

    elif result["type"] == "pricing":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω
        await message.answer(
            "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–æ–º–µ—Ä–æ–≤ –≤ Oqtoshsoy:\n\n"
            "üè† –≠–∫–æ–Ω–æ–º (–°—Ç–∞–Ω–¥–∞—Ä—Ç): 700,000 - 1,200,000 —Å—É–º\n"
            "üè° –ö–æ–º—Ñ–æ—Ä—Ç (VIP): 1,300,000 - 1,900,000 —Å—É–º\n"
            "üè∞ –ü—Ä–µ–º–∏—É–º (–ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã): 1,800,000 - 4,500,000 —Å—É–º\n"
            "üé™ –¢–∞–ø—á–∞–Ω—ã: 300,000 - 500,000 —Å—É–º\n\n"
            "üí° –í –≤—ã—Ö–æ–¥–Ω—ã–µ —Ü–µ–Ω—ã –≤—ã—à–µ –Ω–∞ 20-30%",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìã –ü–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–∞–π—Å", callback_data="detailed_prices")],
                [InlineKeyboardButton(text="üîç –ü–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ –±—é–¥–∂–µ—Ç—É", callback_data="budget_search")]
            ])
        )

    else:
        # –ù–µ –ø–æ–Ω—è–ª–∏ –≤–æ–ø—Ä–æ—Å
        keyboard = []
        for suggestion in result.get("suggestions", []):
            keyboard.append([InlineKeyboardButton(
                text=suggestion,
                callback_data=f"menu_{suggestion[:20]}"
            )])

        await message.answer(
            "ü§î –ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å:\n\n"
            "‚Ä¢ –í—ã–±–æ—Ä–æ–º –Ω–æ–º–µ—Ä–∞\n"
            "‚Ä¢ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º\n"
            "‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫—É—Ä–æ—Ä—Ç–µ\n"
            "‚Ä¢ –¶–µ–Ω–∞–º–∏ –∏ —É—Å–ª–æ–≤–∏—è–º–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ-–¥—Ä—É–≥–æ–º—É:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )