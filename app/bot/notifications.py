# app/bot/notifications.py

import asyncio
from datetime import datetime, timedelta
from aiogram import Bot
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, and_
from app.database.models import Booking, User
from app.config import BOT_TOKEN, ADMIN_TELEGRAM_ID
import logging
# 5. –û–±–Ω–æ–≤–∏—Ç–µ app/bot/notifications.py - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ BatchMessageSender:
from app.bot.batch_sender import BatchMessageSender


async def send_reminder_24h(self, session: AsyncSession):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞ 24 —á–∞—Å–∞ –¥–æ –∑–∞–µ–∑–¥–∞"""
    tomorrow = datetime.now() + timedelta(days=1)
    tomorrow_start = tomorrow.replace(hour=0, minute=0, second=0)
    tomorrow_end = tomorrow.replace(hour=23, minute=59, second=59)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    result = await session.execute(
        select(Booking)
        .options(
            selectinload(Booking.user),
            selectinload(Booking.room)
        )
        .where(
            and_(
                Booking.check_in >= tomorrow_start,
                Booking.check_in <= tomorrow_end,
                Booking.status == "confirmed"
            )
        )
    )
    bookings = result.scalars().all()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞—Ç—á-–æ—Ç–ø—Ä–∞–≤–∫—É
    sender = BatchMessageSender(self.bot, batch_size=25, delay=0.1)

    for booking in bookings:
        text = (
            f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏!\n\n"
            f"–ó–∞–≤—Ç—Ä–∞ –≤–∞—à –∑–∞–µ–∑–¥ –≤ –∫—É—Ä–æ—Ä—Ç Oqtoshsoy:\n"
            f"üõè –ù–æ–º–µ—Ä: {booking.room.name}\n"
            f"üìÖ –ó–∞–µ–∑–¥: {booking.check_in.strftime('%d.%m.%Y')} –≤ 14:00\n"
            f"üìÖ –í—ã–µ–∑–¥: {booking.check_out.strftime('%d.%m.%Y')} –¥–æ 12:00\n\n"
            f"üìç –ê–¥—Ä–µ—Å: –¢–∞—à–∫–µ–Ω—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –ë–æ—Å—Ç–∞–Ω–ª—ã–∫—Å–∫–∏–π —Ä–∞–π–æ–Ω\n"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: +998 90 096 50 55\n\n"
            f"–ñ–¥–µ–º –≤–∞—Å —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º! üåü"
        )

        await sender.add_message(booking.user.telegram_id, text)

logger = logging.getLogger(__name__)


class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

    def __init__(self, bot: Bot):
        for booking in bookings:
            try:
                await self.bot.send_message(
                    booking.user.telegram_id,
                    f"üåü –ö–∞–∫ –ø—Ä–æ—à–µ–ª –≤–∞—à –æ—Ç–¥—ã—Ö?\n\n"
                    f"–ù–∞–¥–µ–µ–º—Å—è, –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –≤ –∫—É—Ä–æ—Ä—Ç–µ Oqtoshsoy!\n"
                    f"–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ - –≤–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ.\n\n"
                    f"–ù–∞–∂–º–∏—Ç–µ /review_{booking.id} —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤\n\n"
                    f"–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ü–µ–Ω–∏—Ç–µ –æ—Ç 1 –¥–æ 5 ‚≠ê",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [
                            InlineKeyboardButton(text="‚≠ê", callback_data=f"rate_{booking.id}_1"),
                            InlineKeyboardButton(text="‚≠ê‚≠ê", callback_data=f"rate_{booking.id}_2"),
                            InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê", callback_data=f"rate_{booking.id}_3"),
                            InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê", callback_data=f"rate_{booking.id}_4"),
                            InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", callback_data=f"rate_{booking.id}_5")
                        ]
                    ])
                )
            except Exception as e:
                logger.error(f"Error sending review request for booking {booking.id}: {e}")

    async def send_special_offers(self, session: AsyncSession, offer_type: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ –∞–∫—Ü–∏–∏
        result = await session.execute(
            select(User).where(User.subscribed_to_offers == True)
        )
        users = result.scalars().all()

        offers = {
            "weekend": {
                "title": "üéâ –°–∫–∏–¥–∫–∞ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –¥–Ω—è!",
                "text": "–¢–æ–ª—å–∫–æ –≤ —ç—Ç–∏ –≤—ã—Ö–æ–¥–Ω—ã–µ:\n"
                        "‚Ä¢ –°–∫–∏–¥–∫–∞ 20% –Ω–∞ –≤—Å–µ –Ω–æ–º–µ—Ä–∞\n"
                        "‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–æ–∑–¥–Ω–∏–π –≤—ã–µ–∑–¥\n"
                        "‚Ä¢ –ö–æ–º–ø–ª–∏–º–µ–Ω—Ç –æ—Ç —à–µ—Ñ-–ø–æ–≤–∞—Ä–∞\n\n"
                        "–ü—Ä–æ–º–æ–∫–æ–¥: WEEKEND20"
            },
            "family": {
                "title": "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º–µ–π–Ω—ã–µ –∫–∞–Ω–∏–∫—É–ª—ã!",
                "text": "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–µ–º–µ–π:\n"
                        "‚Ä¢ –î–µ—Ç–∏ –¥–æ 12 –ª–µ—Ç - –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n"
                        "‚Ä¢ –°–µ–º–µ–π–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ —Å–∫–∏–¥–∫–æ–π 30%\n"
                        "‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–ª—è –¥–µ—Ç–µ–π\n\n"
                        "–î–µ–π—Å—Ç–≤—É–µ—Ç –≤–µ—Å—å –º–µ—Å—è—Ü!"
            },
            "birthday": {
                "title": "üéÇ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –≤ –ø–æ–¥–∞—Ä–æ–∫!",
                "text": "–û—Ç–º–µ—á–∞–π—Ç–µ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É –Ω–∞—Å:\n"
                        "‚Ä¢ –°–∫–∏–¥–∫–∞ 50% –∏–º–µ–Ω–∏–Ω–Ω–∏–∫—É\n"
                        "‚Ä¢ –¢–æ—Ä—Ç –≤ –ø–æ–¥–∞—Ä–æ–∫\n"
                        "‚Ä¢ –£–∫—Ä–∞—à–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞\n"
                        "‚Ä¢ –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç –∫–æ–º–∞–Ω–¥—ã\n\n"
                        "–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ –∑–∞ –Ω–µ–¥–µ–ª—é!"
            }
        }

        offer = offers.get(offer_type)
        if not offer:
            return

        success_count = 0
        for user in users:
            try:
                await self.bot.send_message(
                    user.telegram_id,
                    f"{offer['title']}\n\n{offer['text']}\n\n"
                    f"–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å: /book",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(
                            text="üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ —Å–∫–∏–¥–∫–æ–π",
                            callback_data=f"promo_book_{offer_type}"
                        )],
                        [InlineKeyboardButton(
                            text="‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏",
                            callback_data="unsubscribe_offers"
                        )]
                    ])
                )
                success_count += 1
                await asyncio.sleep(0.1)  # –ó–∞—â–∏—Ç–∞ –æ—Ç —Ñ–ª—É–¥–∞
            except Exception as e:
                logger.error(f"Error sending offer to user {user.telegram_id}: {e}")

        # –û—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É
        await self.bot.send_message(
            ADMIN_TELEGRAM_ID,
            f"üìä –†–∞—Å—Å—ã–ª–∫–∞ '{offer['title']}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}/{len(users)}"
        )

    async def daily_statistics(self, session: AsyncSession):
        """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        today = datetime.now().date()
        yesterday = today - timedelta(days=1)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—á–µ—Ä–∞
        result = await session.execute(
            select(Booking).where(
                and_(
                    Booking.created_at >= yesterday,
                    Booking.created_at < today
                )
            )
        )
        yesterday_bookings = result.scalars().all()

        # –¢–µ–∫—É—â–∏–µ –≥–æ—Å—Ç–∏
        result = await session.execute(
            select(Booking).where(
                and_(
                    Booking.check_in <= today,
                    Booking.check_out > today,
                    Booking.status == "confirmed"
                )
            )
        )
        current_guests = result.scalars().all()

        # –ó–∞–µ–∑–¥—ã —Å–µ–≥–æ–¥–Ω—è
        result = await session.execute(
            select(Booking).where(
                and_(
                    Booking.check_in == today,
                    Booking.status.in_(["confirmed", "pending"])
                )
            )
        )
        today_checkins = result.scalars().all()

        # –í—ã–µ–∑–¥—ã —Å–µ–≥–æ–¥–Ω—è
        result = await session.execute(
            select(Booking).where(
                and_(
                    Booking.check_out == today,
                    Booking.status == "confirmed"
                )
            )
        )
        today_checkouts = result.scalars().all()

        # –†–∞—Å—á–µ—Ç –≤—ã—Ä—É—á–∫–∏
        yesterday_revenue = sum(b.total_price for b in yesterday_bookings if b.status != "cancelled")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞
        await self.bot.send_message(
            ADMIN_TELEGRAM_ID,
            f"üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ {yesterday.strftime('%d.%m.%Y')}\n\n"
            f"üí∞ –í—ã—Ä—É—á–∫–∞: {yesterday_revenue:,.0f} —Å—É–º\n"
            f"üìù –ù–æ–≤—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {len(yesterday_bookings)}\n"
            f"üè† –¢–µ–∫—É—â–∏—Ö –≥–æ—Å—Ç–µ–π: {len(current_guests)}\n\n"
            f"–°–µ–≥–æ–¥–Ω—è {today.strftime('%d.%m.%Y')}:\n"
            f"‚û°Ô∏è –ó–∞–µ–∑–¥—ã: {len(today_checkins)}\n"
            f"‚¨ÖÔ∏è –í—ã–µ–∑–¥—ã: {len(today_checkouts)}\n\n"
            f"–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç: /admin_report"
        )