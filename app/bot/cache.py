# 1. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª app/bot/cache.py
"""
–ú–æ–¥—É–ª—å –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
"""
import json
from functools import lru_cache
from typing import Optional, List, Dict
import redis.asyncio as redis
from app.config import REDIS_URL

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
try:
    redis_client = redis.from_url(REDIS_URL or "redis://localhost:6379", decode_responses=True)
except:
    redis_client = None  # –†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ Redis –µ—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

# –ü—Ä–æ—Å—Ç–æ–µ in-memory –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
memory_cache = {}


async def get_cached(key: str, ttl: int = 300) -> Optional[str]:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞"""
    if redis_client:
        try:
            return await redis_client.get(key)
        except:
            pass

    # Fallback –Ω–∞ memory cache
    return memory_cache.get(key)


async def set_cached(key: str, value: str, ttl: int = 300):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∫–µ—à"""
    if redis_client:
        try:
            await redis_client.setex(key, ttl, value)
            return
        except:
            pass

    # Fallback –Ω–∞ memory cache
    memory_cache[key] = value


# 2. –û–±–Ω–æ–≤–∏—Ç–µ app/bot/handlers.py - –¥–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ:
from app.bot.cache import get_cached, set_cached
import asyncio
from typing import List


# 3. –û–±–Ω–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫–∞–∑–∞ –Ω–æ–º–µ—Ä–æ–≤:
@router.message(F.text == "üõèÔ∏è –ù–æ–º–µ—Ä–∞")
async def show_rooms(message: Message, session: AsyncSession):
    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–µ—à–∞
    cache_key = "rooms_list"
    cached_data = await get_cached(cache_key)

    if cached_data:
        rooms = json.loads(cached_data)
    else:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î
        rooms_obj = await get_all_rooms(session)
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        rooms = [
            {
                "id": r.id,
                "name": r.name,
                "room_type": r.room_type,
                "price_per_night": r.price_per_night,
                "weekend_price": getattr(r, "weekend_price", r.price_per_night)
            }
            for r in rooms_obj
        ]
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à –Ω–∞ 5 –º–∏–Ω—É—Ç
        await set_cached(cache_key, json.dumps(rooms), ttl=300)

    await message.answer(
        "üõèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–º–µ—Ä–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
        reply_markup=rooms_keyboard(rooms),
        parse_mode=None
    )