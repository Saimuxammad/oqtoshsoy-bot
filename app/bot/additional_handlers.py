from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from datetime import datetime, timedelta
import calendar
import logging
import re

from app.bot.additional_keyboards import (
    services_keyboard, service_detail_keyboard, calendar_keyboard,
    service_booking_keyboard, confirm_cancel_keyboard, admin_keyboard,
    room_availability_keyboard, payment_methods_keyboard, updated_main_keyboard
)
from app.database.crud import (
    get_user_by_telegram_id, get_or_create_user
)
from app.database.additional_models import AdditionalService, ServiceBooking, BotAdmin, Payment
from app.database.additional_crud import (
    get_all_services, get_available_services, get_service, create_service_booking,
    check_service_availability, get_user_service_bookings, get_service_booking,
    cancel_service_booking, get_bot_admin, check_admin_permissions,
    get_room_occupancy, get_all_rooms_occupancy, create_payment,
    update_payment_status, calculate_booking_price_enhanced
)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã –¥–ª—è –Ω–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
services_router = Router()
admin_router = Router()
calendar_router = Router()
payment_router = Router()

# –õ–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)


# ============= –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º —É—Å–ª—É–≥ =============

class ServiceBookingStates(StatesGroup):
    selecting_service = State()
    selecting_date = State()
    selecting_time = State()
    entering_guests = State()
    confirming = State()


class AdminStates(StatesGroup):
    managing_rooms = State()
    managing_services = State()
    managing_bookings = State()
    adding_service = State()
    editing_service = State()
    adding_admin = State()
    removing_admin = State()


class PaymentStates(StatesGroup):
    selecting_payment_method = State()
    processing_payment = State()
    confirming_payment = State()


# ============= –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã =============

@services_router.message(Command("menu"))
async def cmd_menu(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
        reply_markup=updated_main_keyboard()
    )


# ============= –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥ =============

@services_router.message(F.text == "üèä‚Äç‚ôÇÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏")
async def show_services(message: Message, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥"""
    services = await get_available_services(session)

    if not services:
        await message.answer(
            "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫—É—Ä–æ—Ä—Ç–∞.",
            reply_markup=updated_main_keyboard()
        )
        return

    await message.answer(
        "üèä‚Äç‚ôÇÔ∏è *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=services_keyboard(services),
        parse_mode="Markdown"
    )


@services_router.callback_query(lambda c: c.data and c.data.startswith("service_"))
async def service_details(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–µ"""
    service_id = int(callback.data.split("_")[1])
    service = await get_service(session, service_id)

    if not service:
        await callback.answer("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏
    if service.is_hourly:
        price_text = f"{service.price:,.0f} —Å—É–º/—á–∞—Å"
    else:
        price_text = f"{service.price:,.0f} —Å—É–º"

    capacity_text = f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫: {service.max_capacity}" if service.max_capacity else ""

    text = (
        f"üèä‚Äç‚ôÇÔ∏è *{service.name}*\n\n"
        f"{service.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price_text}\n"
        f"{capacity_text}\n\n"
        f"–î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    if service.image_url:
        await callback.message.answer_photo(
            photo=service.image_url,
            caption=text,
            reply_markup=service_detail_keyboard(service.id),
            parse_mode="Markdown"
        )
    else:
        await callback.message.answer(
            text=text,
            reply_markup=service_detail_keyboard(service.id),
            parse_mode="Markdown"
        )

    await callback.answer()


@services_router.callback_query(lambda c: c.data and c.data.startswith("book_service_"))
async def start_service_booking(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —É—Å–ª—É–≥–∏"""
    service_id = int(callback.data.split("_")[2])
    service = await get_service(session, service_id)

    if not service:
        await callback.answer("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —É—Å–ª—É–≥–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(service_id=service_id, service_name=service.name)

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É
    today = datetime.now().date()
    calendar_date = today

    await callback.message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∏ *{service.name}*:",
        reply_markup=calendar_keyboard(calendar_date),
        parse_mode="Markdown"
    )

    await state.set_state(ServiceBookingStates.selecting_date)
    await callback.answer()


@services_router.callback_query(lambda c: c.data and c.data.startswith("calendar_"),
                                ServiceBookingStates.selecting_date)
async def process_calendar_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ"""
    action = callback.data.split("_")[1]

    if action == "day":
        # –í—ã–±—Ä–∞–Ω –¥–µ–Ω—å
        selected_date = callback.data.split("_")[2]
        await state.update_data(selected_date=selected_date)

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è
        data = await state.get_data()
        service_id = data.get("service_id")
        service = await get_service(session, service_id)

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
        available_slots = []
        start_hour = 9  # 9:00
        end_hour = 21  # 21:00
        slot_duration = 1  # 1 —á–∞—Å

        current_hour = start_hour
        while current_hour < end_hour:
            start_time = f"{current_hour:02d}:00"
            end_time = f"{current_hour + slot_duration:02d}:00"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–∞
            is_available = await check_service_availability(
                session, service_id, selected_date, start_time, end_time
            )

            if is_available:
                available_slots.append((start_time, end_time))

            current_hour += slot_duration

        if not available_slots:
            await callback.message.answer(
                f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É ({selected_date}) –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.",
                reply_markup=calendar_keyboard(datetime.strptime(selected_date, "%Y-%m-%d").date())
            )
            return

        await callback.message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∏ *{service.name}*:\n"
            f"–î–∞—Ç–∞: {selected_date}",
            reply_markup=service_booking_keyboard(available_slots),
            parse_mode="Markdown"
        )

        await state.set_state(ServiceBookingStates.selecting_time)

    elif action == "next" or action == "prev":
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É/–ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ—Å—è—Ü—É
        current_date = callback.data.split("_")[2]
        year, month = map(int, current_date.split("-"))

        if action == "next":
            if month == 12:
                month = 1
                year += 1
            else:
                month += 1
        else:
            if month == 1:
                month = 12
                year -= 1
            else:
                month -= 1

        new_date = datetime(year, month, 1).date()
        await callback.message.edit_reply_markup(
            reply_markup=calendar_keyboard(new_date)
        )

    await callback.answer()


@services_router.callback_query(lambda c: c.data and c.data.startswith("time_"),
                                ServiceBookingStates.selecting_time)
async def process_time_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    time_data = callback.data.split("_")[1:]
    start_time = time_data[0]
    end_time = time_data[1]

    await state.update_data(start_time=start_time, end_time=end_time)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ
    data = await state.get_data()
    service_id = data.get("service_id")
    service = await get_service(session, service_id)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π
    max_guests_text = f" (–º–∞–∫—Å–∏–º—É–º {service.max_capacity})" if service.max_capacity else ""

    await callback.message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ –¥–ª—è —É—Å–ª—É–≥–∏ *{service.name}*{max_guests_text}:",
        parse_mode="Markdown"
    )

    await state.set_state(ServiceBookingStates.entering_guests)
    await callback.answer()


@services_router.message(ServiceBookingStates.entering_guests)
async def process_guests_count(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ—Å—Ç–µ–π"""
    try:
        guests = int(message.text.strip())
        if guests <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –≥–æ—Å—Ç–µ–π (—Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ).")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ
    data = await state.get_data()
    service_id = data.get("service_id")
    service = await get_service(session, service_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≥–æ—Å—Ç–µ–π
    if service.max_capacity and guests > service.max_capacity:
        await message.answer(
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π –¥–ª—è —ç—Ç–æ–π —É—Å–ª—É–≥–∏: {service.max_capacity}.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ."
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π
    await state.update_data(guests=guests)

    # –°—É–º–º–∏—Ä—É–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    data = await state.get_data()
    selected_date = data.get("selected_date")
    start_time = data.get("start_time")
    end_time = data.get("end_time")

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
    if service.is_hourly:
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤—Ä–µ–º—è –≤ —á–∞—Å—ã
        start_hour = int(start_time.split(":")[0])
        end_hour = int(end_time.split(":")[0])
        duration_hours = end_hour - start_hour
        price = service.price * duration_hours
    else:
        price = service.price

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirmation_text = (
        f"üìã *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è*\n\n"
        f"–£—Å–ª—É–≥–∞: *{service.name}*\n"
        f"–î–∞—Ç–∞: {selected_date}\n"
        f"–í—Ä–µ–º—è: —Å {start_time} –¥–æ {end_time}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫: {guests}\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price:,.0f} —Å—É–º\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:"
    )

    await message.answer(
        confirmation_text,
        reply_markup=confirm_cancel_keyboard(),
        parse_mode="Markdown"
    )

    await state.set_state(ServiceBookingStates.confirming)


@services_router.callback_query(F.data == "confirm", ServiceBookingStates.confirming)
async def confirm_service_booking(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    service_id = data.get("service_id")
    selected_date = data.get("selected_date")
    start_time = data.get("start_time")
    end_time = data.get("end_time")
    guests = data.get("guests")

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = await get_or_create_user(
        session,
        telegram_id=callback.from_user.id,
        username=callback.from_user.username,
        first_name=callback.from_user.first_name,
        last_name=callback.from_user.last_name
    )

    try:
        # –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏
        service_booking = await create_service_booking(
            session,
            user_id=user.id,
            service_id=service_id,
            date=selected_date,
            start_time=start_time,
            end_time=end_time,
            guests=guests
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await callback.message.answer(
            f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
            f"–ù–æ–º–µ—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: #{service_booking.id}\n"
            f"–£—Å–ª—É–≥–∞: {data.get('service_name')}\n"
            f"–î–∞—Ç–∞: {selected_date}\n"
            f"–í—Ä–µ–º—è: —Å {start_time} –¥–æ {end_time}\n"
            f"–°—É–º–º–∞: {service_booking.total_price:,.0f} —Å—É–º\n\n"
            f"–°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n\n"
            f"–° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.",
            reply_markup=payment_methods_keyboard(service_booking.id, "service")
        )

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

    except ValueError as e:
        await callback.message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –¥–∞—Ç—É.",
            reply_markup=updated_main_keyboard()
        )
        await state.clear()

    await callback.answer()


@services_router.callback_query(F.data == "cancel", ServiceBookingStates.confirming)
async def cancel_booking_process(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await callback.message.answer(
        "‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=updated_main_keyboard()
    )
    await state.clear()
    await callback.answer()


@services_router.callback_query(F.data == "back_to_services")
async def back_to_services_list(callback: CallbackQuery, session: AsyncSession):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥"""
    services = await get_available_services(session)

    await callback.message.answer(
        "üèä‚Äç‚ôÇÔ∏è *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=services_keyboard(services),
        parse_mode="Markdown"
    )

    await callback.answer()


@services_router.message(F.text == "üìÖ –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
async def show_user_bookings(message: Message, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–æ–º–µ—Ä–∞ –∏ —É—Å–ª—É–≥–∏)"""
    user = await get_user_by_telegram_id(session, message.from_user.id)
    if not user:
        await message.answer(
            "–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            reply_markup=updated_main_keyboard()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤
    from app.database.crud import get_user_bookings
    room_bookings = await get_user_bookings(session, user.id)

    # –ü–æ–ª—É—á–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥
    service_bookings = await get_user_service_bookings(session, user.id)

    # –ï—Å–ª–∏ –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    if not room_bookings and not service_bookings:
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.",
            reply_markup=updated_main_keyboard()
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö –Ω–æ–º–µ—Ä–æ–≤
    message_text = "üìÖ *–í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è*\n\n"

    if room_bookings:
        message_text += "*–ù–æ–º–µ—Ä–∞:*\n"
        for booking in room_bookings:
            status_emoji = "‚úÖ" if booking.status == "confirmed" else "‚è≥" if booking.status == "pending" else "‚ùå"
            message_text += (
                f"{status_emoji} {booking.room.name} #{booking.id}\n"
                f"  üìÖ {booking.check_in.strftime('%d.%m.%Y')} - {booking.check_out.strftime('%d.%m.%Y')}\n"
                f"  üë• {booking.guests} —á–µ–ª., üí∞ {booking.total_price:,.0f} —Å—É–º\n"
                f"  –°—Ç–∞—Ç—É—Å: {booking.status}\n\n"
            )

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö —É—Å–ª—É–≥
    if service_bookings:
        message_text += "*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:*\n"
        for booking in service_bookings:
            if booking.status == "cancelled":
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

            status_emoji = "‚úÖ" if booking.status == "confirmed" else "‚è≥" if booking.status == "pending" else "‚ùå"
            message_text += (
                f"{status_emoji} {booking.service.name} #{booking.id}\n"
                f"  üìÖ {booking.date.strftime('%d.%m.%Y')}, "
                f"‚è∞ {booking.start_time.strftime('%H:%M')}-{booking.end_time.strftime('%H:%M')}\n"
                f"  üë• {booking.guests} —á–µ–ª., üí∞ {booking.total_price:,.0f} —Å—É–º\n"
                f"  –°—Ç–∞—Ç—É—Å: {booking.status}\n\n"
            )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö
    await message.answer(message_text, parse_mode="Markdown")


# ============= –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏ =============

@admin_router.message(Command("admin"))
async def admin_panel(message: Message, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    admin = await get_bot_admin(session, message.from_user.id)

    if not admin:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏.")
        return

    admin_text = (
        f"üë®‚Äçüíº *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å*\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    )

    await message.answer(
        admin_text,
        reply_markup=admin_keyboard(admin),
        parse_mode="Markdown"
    )


@admin_router.callback_query(lambda c: c.data and c.data == "admin_rooms")
async def admin_manage_rooms(callback: CallbackQuery, session: AsyncSession):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞–º–∏"""
    admin = await get_bot_admin(session, callback.from_user.id)

    if not admin or not admin.can_manage_rooms:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É")
        return

    await callback.message.answer(
        "üõèÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞–º–∏*\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å, –¥–æ–±–∞–≤–ª—è—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä–∞, "
        "–∞ —Ç–∞–∫–∂–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∏—Ö –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=room_availability_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()


@admin_router.callback_query(lambda c: c.data and c.data == "admin_services")
async def admin_manage_services(callback: CallbackQuery, session: AsyncSession):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —É—Å–ª—É–≥–∞–º–∏"""
    admin = await get_bot_admin(session, callback.from_user.id)

    if not admin or not admin.can_manage_services:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É")
        return

    services = await get_all_services(session)

    await callback.message.answer(
        "üèä‚Äç‚ôÇÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —É—Å–ª—É–≥–∞–º–∏*\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å, –¥–æ–±–∞–≤–ª—è—Ç—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —É–¥–∞–ª—è—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=services_keyboard(services, is_admin=True),
        parse_mode="Markdown"
    )
    await callback.answer()


@admin_router.callback_query(lambda c: c.data and c.data == "admin_bookings")
async def admin_manage_bookings(callback: CallbackQuery, session: AsyncSession):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏"""
    admin = await get_bot_admin(session, callback.from_user.id)

    if not admin or not admin.can_manage_bookings:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É")
        return

    await callback.message.answer(
        "üìù *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏*\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏ –Ω–æ–º–µ—Ä–æ–≤ –∏ —É—Å–ª—É–≥.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="Markdown"
    )
    await callback.answer()


@admin_router.callback_query(lambda c: c.data and c.data == "room_calendar")
async def show_room_calendar(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–æ–≤"""
    admin = await get_bot_admin(session, callback.from_user.id)

    if not admin or not admin.can_manage_rooms:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–æ–≤ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –º–µ—Å—è—Ü
    today = datetime.now().date()
    next_month = today + timedelta(days=30)

    occupancy = await get_all_rooms_occupancy(
        session,
        today.strftime("%Y-%m-%d"),
        next_month.strftime("%Y-%m-%d")
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
    message_text = "üìÖ *–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–æ–≤*\n\n"

    from app.database.crud import get_all_rooms
    rooms = await get_all_rooms(session)

    for room in rooms:
        room_occupancy = occupancy.get(room.id, [])
        message_text += f"*{room.name}:*\n"

        if not room_occupancy:
            message_text += "  –°–≤–æ–±–æ–¥–µ–Ω –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –º–µ—Å—è—Ü\n\n"
            continue

        for booking in room_occupancy:
            message_text += (
                f"  ‚Ä¢ {booking['check_in']} - {booking['check_out']}\n"
                f"    {booking['guest_name']}, {booking['guests']} —á–µ–ª.\n"
            )

        message_text += "\n"

    await callback.message.answer(
        message_text,
        parse_mode="Markdown"
    )
    await callback.answer()


@admin_router.callback_query(F.data == "back_to_admin")
async def back_to_admin_panel(callback: CallbackQuery, session: AsyncSession):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏"""
    admin = await get_bot_admin(session, callback.from_user.id)

    if not admin:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏")
        return

    admin_text = (
        f"üë®‚Äçüíº *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å*\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {callback.from_user.first_name}!\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    )

    await callback.message.answer(
        admin_text,
        reply_markup=admin_keyboard(admin),
        parse_mode="Markdown"
    )
    await callback.answer()


# ============= –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π =============

@payment_router.callback_query(lambda c: c.data and c.data.startswith("pay_"))
async def start_payment_process(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã"""
    # –§–æ—Ä–º–∞—Ç data: pay_<type>_<id>_<method>
    # type: booking –∏–ª–∏ service
    # id: ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    # method: payme, click –∏–ª–∏ cash
    parts = callback.data.split("_")

    if len(parts) < 4:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        return

    booking_type = parts[1]
    booking_id = int(parts[2])
    payment_method = parts[3]

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
    if booking_type == "booking":
        from app.database.crud import get_booking
        booking = await get_booking(session, booking_id)
        if not booking:
            await callback.answer("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        amount = booking.total_price
        service_booking_id = None
        description = f"–û–ø–ª–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ #{booking_id}"

    elif booking_type == "service":
        service_booking = await get_service_booking(session, booking_id)
        if not service_booking:
            await callback.answer("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        amount = service_booking.total_price
        booking_id = None
        service_booking_id = service_booking.id
        description = f"–û–ø–ª–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∏ {service_booking.service.name} #{service_booking_id}"

    else:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã
    if payment_method == "cash":
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ —Å –º–µ—Ç–æ–¥–æ–º –æ–ø–ª–∞—Ç—ã "cash"
        payment = await create_payment(
            session,
            amount=amount,
            payment_method="cash",
            booking_id=booking_id,
            service_booking_id=service_booking_id,
            details={"description": description, "payment_type": "cash"}
        )

        await callback.message.answer(
            f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –∑–∞—Å–µ–ª–µ–Ω–∏–∏\n\n"
            f"–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ. –û–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –ø—Ä–∏ –∑–∞—Å–µ–ª–µ–Ω–∏–∏.\n"
            f"–ù–æ–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞: #{payment.id}\n"
            f"–°—É–º–º–∞: {amount:,.0f} —Å—É–º",
            reply_markup=updated_main_keyboard()
        )

    elif payment_method in ["payme", "click"]:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
        payment = await create_payment(
            session,
            amount=amount,
            payment_method=payment_method,
            booking_id=booking_id,
            service_booking_id=service_booking_id,
            details={"description": description, "payment_type": "online"}
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ –æ–ø–ª–∞—Ç–µ
        payment_instructions = (
            f"üí≥ *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ —á–µ—Ä–µ–∑ {payment_method.upper()}*\n\n"
            f"1. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ\n"
            f"2. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É: {amount:,.0f} —Å—É–º\n"
            f"3. –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: "
            f"{'B' if booking_id else 'S'}{booking_id or service_booking_id}\n\n"
            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

        await callback.message.answer(
            payment_instructions,
            parse_mode="Markdown"
        )

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞ –∏–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É
        # –í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é

    else:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã")
        return

    await callback.answer()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ –æ–¥–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    def register_additional_handlers(dispatcher):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""
        dispatcher.include_router(services_router)
        dispatcher.include_router(admin_router)
        dispatcher.include_router(calendar_router)
        dispatcher.include_router(payment_router)