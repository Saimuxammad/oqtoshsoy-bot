from aiogram import F
from aiogram.types import Message, CallbackQuery, InputMediaPhoto, WebAppInfo
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import calendar
from datetime import datetime, timedelta
import json
import logging

from app.bot.singleton_router import get_router
from app.bot.keyboards import main_keyboard, rooms_keyboard, room_detail_keyboard, support_keyboard
from app.database.crud import (
    get_user_by_telegram_id, create_user, get_all_rooms,
    get_room, get_room_reviews, get_or_create_user, check_room_availability
)
from app.database.models import User
from app.config import RESORT_PHONE, RESORT_ADMIN_USERNAME, RESORT_NAME, RESORT_LOCATION, RESORT_ALTITUDE, WEBAPP_URL

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# Get the singleton router instance
router = get_router()


# Handler for /start command
@router.message(Command("start"))
async def cmd_start(message: Message, session: AsyncSession):
    logger.info(f"Start command from user {message.from_user.id}")

    # Check if user exists in the database or create a new one
    user = await get_or_create_user(
        session,
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )

    await message.answer(
        f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}!\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∫—É—Ä–æ—Ä—Ç–∞ ¬´{RESORT_NAME}¬ª.\n\n"
        f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—à–µ–º –∫—É—Ä–æ—Ä—Ç–µ, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–º–µ—Ä–∞, "
        f"–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ, –∞ —Ç–∞–∫–∂–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
        reply_markup=main_keyboard()
    )


# Handler for "About Resort" button
@router.message(F.text == "üè® –û –∫—É—Ä–æ—Ä—Ç–µ")
async def about_resort(message: Message):
    logger.info(f"About resort from user {message.from_user.id}")

    await message.answer(
        f"üè® –ö—É—Ä–æ—Ä—Ç ¬´{RESORT_NAME}¬ª\n\n"
        f"–ù–∞—à –∫—É—Ä–æ—Ä—Ç —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –≤ –∂–∏–≤–æ–ø–∏—Å–Ω–æ–º –≥–æ—Ä–Ω–æ–º —É—â–µ–ª—å–µ, –≤ 120 –∫–º –æ—Ç –≥–æ—Ä–æ–¥–∞ –¢–∞—à–∫–µ–Ω—Ç.\n\n"
        f"üìç –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {RESORT_LOCATION}\n"
        f"üèî –í—ã—Å–æ—Ç–∞ –Ω–∞–¥ —É—Ä–æ–≤–Ω–µ–º –º–æ—Ä—è: {RESORT_ALTITUDE}\n"
        f"üå° –ö–ª–∏–º–∞—Ç: –ì–æ—Ä–Ω—ã–π, —É–º–µ—Ä–µ–Ω–Ω—ã–π\n\n"
        f"–ù–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –∫—É—Ä–æ—Ä—Ç–∞:\n"
        f"- –û—Ç–∫—Ä—ã—Ç—ã–π –∏ –∑–∞–∫—Ä—ã—Ç—ã–π –±–∞—Å—Å–µ–π–Ω—ã\n"
        f"- –†–µ—Å—Ç–æ—Ä–∞–Ω —Å –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∏ –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–π –∫—É—Ö–Ω–µ–π\n"
        f"- SPA-—Ü–µ–Ω—Ç—Ä\n"
        f"- –î–µ—Ç—Å–∫–∞—è –ø–ª–æ—â–∞–¥–∫–∞\n"
        f"- –ó–æ–Ω—ã –¥–ª—è –ø–∏–∫–Ω–∏–∫–∞\n\n"
        f"–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –∫—Ä—É–≥–ª—ã–π –≥–æ–¥ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∏–¥—ã –æ—Ç–¥—ã—Ö–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–µ–∑–æ–Ω–∞.",
        parse_mode=None
    )


# Handler for "Rooms" button
@router.message(F.text == "üõèÔ∏è –ù–æ–º–µ—Ä–∞")
async def show_rooms(message: Message, session: AsyncSession):
    logger.info(f"Show rooms from user {message.from_user.id}")

    # Get rooms with await
    rooms = await get_all_rooms(session)

    await message.answer(
        "üõèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–º–µ—Ä–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
        reply_markup=rooms_keyboard(rooms),
        parse_mode=None
    )


# Handler –¥–ª—è –≥—Ä—É–ø–ø –Ω–æ–º–µ—Ä–æ–≤
@router.callback_query(lambda c: c.data and c.data.startswith("room_type_"))
async def room_type_info(callback: CallbackQuery, session: AsyncSession):
    logger.info(f"Room type info: {callback.data}")

    room_type = callback.data.split("_")[2]

    # –û–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –Ω–æ–º–µ—Ä–æ–≤
    type_descriptions = {
        "standard": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —É–¥–æ–±—Å—Ç–≤–∞–º–∏ –¥–ª—è –æ—Ç–ª–∏—á–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞.",
        "luxury": "–õ—é–∫—Å –Ω–æ–º–µ—Ä–∞ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º –∫–æ–º—Ñ–æ—Ä—Ç–æ–º –∏ –ø—Ä–æ—Å—Ç–æ—Ä–Ω–æ—Å—Ç—å—é –¥–ª—è —Ç—Ä–µ–±–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –≥–æ—Å—Ç–µ–π.",
        "vip": "VIP –Ω–æ–º–µ—Ä–∞ –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –¥–ª—è –æ—Å–æ–±—ã—Ö –≥–æ—Å—Ç–µ–π.",
        "apartment": "–ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã –≤–∫–ª—é—á–∞—é—Ç –∫—É—Ö–æ–Ω–Ω—É—é –∑–æ–Ω—É –∏ –æ—Ç–¥–µ–ª—å–Ω—É—é –≥–æ—Å—Ç–∏–Ω—É—é –¥–ª—è –±–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è.",
        "cottage": "–ö–æ—Ç—Ç–µ–¥–∂–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π –æ—Ç–¥–µ–ª—å–Ω–æ —Å—Ç–æ—è—â–∏–µ –¥–æ–º–∏–∫–∏ —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–µ–π –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏.",
        "president": "–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏–µ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã - —Å–∞–º–æ–µ —Ä–æ—Å–∫–æ—à–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º —Å–µ—Ä–≤–∏—Å–∞ –∏ –∫–æ–º—Ñ–æ—Ä—Ç–∞.",
        "tapchan": "–¢–∞–ø—á–∞–Ω—ã - —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –∑–æ–Ω—ã –æ—Ç–¥—ã—Ö–∞ –ø–æ–¥ –æ—Ç–∫—Ä—ã—Ç—ã–º –Ω–µ–±–æ–º –¥–ª—è –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞ –∫–æ–º–ø–∞–Ω–∏–µ–π."
    }

    # –¢–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
    if room_type in type_descriptions:
        await callback.message.answer(
            f"‚ÑπÔ∏è {type_descriptions[room_type]}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.",
            parse_mode=None
        )

    await callback.answer()


# Handler for room selection - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô
@router.callback_query(lambda c: c.data and c.data.startswith("room_") and len(c.data.split("_")) == 2)
async def room_details(callback: CallbackQuery, session: AsyncSession):
    logger.info(f"Room details: {callback.data}")

    try:
        room_id = int(callback.data.split("_")[1])
    except (ValueError, IndexError):
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
        return

    room = await get_room(session, room_id)

    if not room:
        await callback.answer("–ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–æ–º–µ—Ä–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    room_type_names = {
        "standard": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π",
        "luxury": "–õ—é–∫—Å",
        "vip": "VIP",
        "apartment": "–ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç",
        "cottage": "–ö–æ—Ç—Ç–µ–¥–∂",
        "president": "–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏–π",
        "tapchan": "–¢–∞–ø—á–∞–Ω"
    }

    room_type_ru = room_type_names.get(room.room_type, room.room_type)

    # –§–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã
    if hasattr(room, "weekend_price") and room.weekend_price and room.weekend_price != room.price_per_night:
        price_text = f"{room.price_per_night:,.0f} —Å—É–º (–ü–ù-–ß–¢) / {room.weekend_price:,.0f} —Å—É–º (–ü–¢-–í–°)"
    else:
        price_text = f"{room.price_per_night:,.0f} —Å—É–º"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ
    included_text = ""
    if room.room_type != "tapchan":
        included_text = "–í–∫–ª—é—á–µ–Ω–æ:\n"
        if hasattr(room, "with_breakfast") and room.with_breakfast:
            included_text += "- –ó–∞–≤—Ç—Ä–∞–∫\n"
        included_text += "- 1 —á–∞—Å –¥–µ—Ç—Å–∫–∞—è –ø–ª–æ—â–∞–¥–∫–∞\n"
    else:
        included_text = "–î–æ—Å—Ç—É–ø–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:\n- –ú–∞–Ω–≥–∞–ª (–ø–æ –∑–∞–ø—Ä–æ—Å—É)\n"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∏–¥–µ–æ
    has_video = hasattr(room, 'video_url') and room.video_url is not None

    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è
    text = (
        f"üõèÔ∏è {room.name}\n\n"
        f"–¢–∏–ø: {room_type_ru}\n"
        f"–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {room.capacity} —á–µ–ª.\n"
        f"–¶–µ–Ω–∞: {price_text}\n\n"
        f"{room.description}\n\n"
        f"{included_text}\n"
        f"–í—Ä–µ–º—è –∑–∞–µ–∑–¥–∞: 14:00\n"
        f"–í—Ä–µ–º—è –≤—ã–µ–∑–¥–∞: 12:00\n\n"
        f"–î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
    if room.image_url:
        await callback.message.answer_photo(
            photo=room.image_url,
            caption=text,
            reply_markup=room_detail_keyboard(room.id, has_video=has_video),
            parse_mode=None
        )
    else:
        await callback.message.answer(
            text=text,
            reply_markup=room_detail_keyboard(room.id, has_video=has_video),
            parse_mode=None
        )

    await callback.answer()


# Handler for "Contact Support" button
@router.message(F.text == "üìû –°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")
async def contact_support(message: Message):
    logger.info(f"Contact support from user {message.from_user.id}")

    await message.answer(
        "üìû –°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –æ–¥–Ω–∏–º –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–ø–æ—Å–æ–±–æ–≤:\n\n"
        f"‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: {RESORT_PHONE}\n"
        f"‚úâÔ∏è Telegram: @{RESORT_ADMIN_USERNAME}",
        reply_markup=support_keyboard(),
        parse_mode=None
    )


# Handler for phone number display
@router.callback_query(F.data == "phone_number")
async def show_phone_number(callback: CallbackQuery):
    await callback.answer(f"–¢–µ–ª–µ—Ñ–æ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {RESORT_PHONE}")


@router.callback_query(F.data == "call_support")
async def call_support(callback: CallbackQuery):
    await callback.message.answer(
        "üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞–º –ø–æ –Ω–æ–º–µ—Ä—É:\n"
        f"{RESORT_PHONE}\n\n"
        "–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: 9:00 - 18:00 (–ü–ù-–°–ë)",
        parse_mode=None
    )
    await callback.answer()


# Handler for "Reviews" button
@router.message(F.text == "‚≠ê –û—Ç–∑—ã–≤—ã")
async def show_reviews(message: Message, session: AsyncSession):
    logger.info(f"Show reviews from user {message.from_user.id}")

    await message.answer(
        "‚≠ê –û—Ç–∑—ã–≤—ã –æ –∫—É—Ä–æ—Ä—Ç–µ\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –≥–æ—Å—Ç–µ–π –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –æ—Ç–∑—ã–≤.\n\n"
        "–ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞—à–∏–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ –Ω–∞–ø—Ä—è–º—É—é –±–æ—Ç—É.",
        parse_mode=None
    )


# Handler for returning to main menu
@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery):
    await callback.message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=main_keyboard()
    )
    await callback.message.delete()
    await callback.answer()


# Handler for returning to rooms list
@router.callback_query(F.data == "back_to_rooms")
async def back_to_rooms(callback: CallbackQuery, session: AsyncSession):
    rooms = await get_all_rooms(session)
    await callback.message.answer(
        "üõèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–º–µ—Ä–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
        reply_markup=rooms_keyboard(rooms),
        parse_mode=None
    )
    await callback.message.delete()
    await callback.answer()


# Handler for room reviews
@router.callback_query(lambda c: c.data and c.data.startswith("reviews_"))
async def room_reviews(callback: CallbackQuery, session: AsyncSession):
    room_id = int(callback.data.split("_")[1])
    reviews = await get_room_reviews(session, room_id)
    room = await get_room(session, room_id)

    if not reviews:
        text = f"‚≠ê –û—Ç–∑—ã–≤—ã –æ –Ω–æ–º–µ—Ä–µ \"{room.name}\"\n\n–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –æ–± —ç—Ç–æ–º –Ω–æ–º–µ—Ä–µ."
    else:
        text = f"‚≠ê –û—Ç–∑—ã–≤—ã –æ –Ω–æ–º–µ—Ä–µ \"{room.name}\"\n\n"
        for review in reviews:
            stars = "‚≠ê" * review.rating
            text += f"{stars}\n{review.comment}\n\n"

    await callback.message.answer(
        text,
        reply_markup=room_detail_keyboard(room_id),
        parse_mode=None
    )
    await callback.answer()


# =================== –í–ò–î–ï–û –§–£–ù–ö–¶–ò–ò ===================

# Handler –¥–ª—è –≤–∏–¥–µ–æ-—Ç—É—Ä–æ–≤ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
@router.callback_query(lambda c: c.data and c.data.startswith("video_tour_"))
async def show_video_tour(callback: CallbackQuery, session: AsyncSession):
    logger.info(f"Video tour: {callback.data}")

    room_id = int(callback.data.split("_")[2])
    room = await get_room(session, room_id)

    if not room:
        await callback.answer("–ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∏–¥–µ–æ URL
    if not hasattr(room, 'video_url') or not room.video_url:
        # –ï—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(
            f"üé• –í–∏–¥–µ–æ-—Ç—É—Ä –¥–ª—è –Ω–æ–º–µ—Ä–∞ \"{room.name}\" –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–æ–º–µ—Ä–∞ –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –¥–ª—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —ç–∫—Å–∫—É—Ä—Å–∏–∏.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì∏ –°–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ", callback_data=f"all_photos_{room_id}")],
                [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è", callback_data="call_support")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"room_{room_id}")]
            ])
        )
        await callback.answer("–í–∏–¥–µ–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        return

    # –ï—Å–ª–∏ –≤–∏–¥–µ–æ –µ—Å—Ç—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ñ∂Ô∏è –°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ", url=room.video_url)],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –Ω–æ–º–µ—Ä—É", callback_data=f"room_{room_id}")]
    ])

    await callback.message.answer(
        f"üé• –í–∏–¥–µ–æ-—Ç—É—Ä: {room.name}\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ-–æ–±–∑–æ—Ä –Ω–æ–º–µ—Ä–∞.",
        reply_markup=keyboard
    )
    await callback.answer()


# –î–æ–±–∞–≤–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É
@router.message(F.text == "üé• –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —Ç—É—Ä—ã")
async def virtual_tours_menu(message: Message):
    logger.info(f"Virtual tours from user {message.from_user.id}")

    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥–µ–º–æ-–∫–æ–Ω—Ç–µ–Ω—Ç
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üèû –û–±–∑–æ—Ä —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏",
            url="https://www.youtube.com/watch?v=dQw4w9WgXcQ"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ
        )],
        [InlineKeyboardButton(
            text="üèä –ó–æ–Ω–∞ –±–∞—Å—Å–µ–π–Ω–∞",
            url="https://www.youtube.com/watch?v=dQw4w9WgXcQ"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ
        )],
        [InlineKeyboardButton(
            text="üçΩ –†–µ—Å—Ç–æ—Ä–∞–Ω",
            url="https://www.youtube.com/watch?v=dQw4w9WgXcQ"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ
        )],
        [InlineKeyboardButton(
            text="üè† –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ç—É—Ä 360¬∞",
            url="https://www.google.com/maps/@41.2995,69.2401,3a,75y,90t/data=!3m6!1e1!3m4!1s0x0:0x0!2e0!7i13312!8i6656"
            # –ü—Ä–∏–º–µ—Ä
        )],
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ])

    await message.answer(
        "üé• –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —Ç—É—Ä—ã –ø–æ –∫—É—Ä–æ—Ä—Ç—É Oqtoshsoy\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:\n"
        "–í–∏–¥–µ–æ –æ—Ç–∫—Ä–æ—é—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ.",
        reply_markup=keyboard,
        parse_mode=None
    )


# Handler –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö —Ñ–æ—Ç–æ –Ω–æ–º–µ—Ä–∞
@router.callback_query(lambda c: c.data and c.data.startswith("all_photos_"))
async def show_all_photos(callback: CallbackQuery, session: AsyncSession):
    logger.info(f"All photos: {callback.data}")

    room_id = int(callback.data.split("_")[2])
    room = await get_room(session, room_id)

    if not room:
        await callback.answer("–ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ü–∞—Ä—Å–∏–º JSON —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
    photos = []
    if room.photos:
        try:
            photos = json.loads(room.photos)
        except:
            photos = []

    if photos:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        media_group = []
        for i, photo_url in enumerate(photos[:10]):  # –ú–∞–∫—Å–∏–º—É–º 10 —Ñ–æ—Ç–æ –≤ –∞–ª—å–±–æ–º–µ
            media_group.append(
                InputMediaPhoto(
                    media=photo_url,
                    caption=f"{room.name} - —Ñ–æ—Ç–æ {i + 1}" if i == 0 else None
                )
            )

        await callback.message.answer_media_group(media_group)

        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –±–æ–ª—å—à–µ 10, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
        if len(photos) > 10:
            await callback.message.answer(
                f"–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 10 —Ñ–æ—Ç–æ –∏–∑ {len(photos)}.\n"
                f"–í—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –Ω–∞—à–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="üì∏ –°–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ",
                        web_app=WebAppInfo(url=f"{WEBAPP_URL}?room_id={room_id}&tab=photos")
                    )],
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"room_{room_id}")]
                ])
            )
    else:
        await callback.message.answer(
            "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.",
            reply_markup=room_detail_keyboard(room_id)
        )

    await callback.answer()


# =================== –ë–´–°–¢–†–û–ï –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï ===================

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç
def generate_calendar_keyboard(year: int, month: int, selected_dates: list = None):
    if selected_dates is None:
        selected_dates = []

    keyboard = []

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Å—è—Ü–µ–º –∏ –≥–æ–¥–æ–º
    month_name = calendar.month_name[month]
    header = [InlineKeyboardButton(
        text=f"{month_name} {year}",
        callback_data="ignore"
    )]
    keyboard.append(header)

    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    keyboard.append([
        InlineKeyboardButton(text=day, callback_data="ignore")
        for day in week_days
    ])

    # –ö–∞–ª–µ–Ω–¥–∞—Ä—å
    cal = calendar.monthcalendar(year, month)
    today = datetime.now().date()

    for week in cal:
        row = []
        for day in week:
            if day == 0:
                row.append(InlineKeyboardButton(text=" ", callback_data="ignore"))
            else:
                date = datetime(year, month, day).date()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—à–µ–¥—à–∞—è –ª–∏ —ç—Ç–æ –¥–∞—Ç–∞
                if date < today:
                    row.append(InlineKeyboardButton(
                        text=f"¬∑{day}¬∑",
                        callback_data="ignore"
                    ))
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ –¥–∞—Ç–∞
                elif date in selected_dates:
                    row.append(InlineKeyboardButton(
                        text=f"‚úÖ {day}",
                        callback_data=f"unselect_date_{date.isoformat()}"
                    ))
                # –í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º
                elif date.weekday() in [4, 5, 6]:  # –ü—Ç, –°–±, –í—Å
                    row.append(InlineKeyboardButton(
                        text=f"üî¥ {day}",
                        callback_data=f"select_date_{date.isoformat()}"
                    ))
                else:
                    row.append(InlineKeyboardButton(
                        text=str(day),
                        callback_data=f"select_date_{date.isoformat()}"
                    ))
        keyboard.append(row)

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_row = []
    if month > 1 or year > datetime.now().year:
        nav_row.append(InlineKeyboardButton(
            text="‚óÄÔ∏è",
            callback_data=f"calendar_{year}_{month - 1 if month > 1 else 12}_{year if month > 1 else year - 1}"
        ))
    nav_row.append(InlineKeyboardButton(
        text="üìÖ –°–µ–≥–æ–¥–Ω—è",
        callback_data=f"calendar_{datetime.now().year}_{datetime.now().month}_current"
    ))
    nav_row.append(InlineKeyboardButton(
        text="‚ñ∂Ô∏è",
        callback_data=f"calendar_{year}_{month + 1 if month < 12 else 1}_{year if month < 12 else year + 1}"
    ))
    keyboard.append(nav_row)

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# –ë—ã—Å—Ç—Ä–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
@router.callback_query(lambda c: c.data and c.data.startswith("quick_book_"))
async def quick_booking(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    logger.info(f"Quick booking: {callback.data}")

    room_id = int(callback.data.split("_")[2])
    room = await get_room(session, room_id)

    if not room:
        await callback.answer("–ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(room_id=room_id, room_name=room.name)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–∞—Ç
    today = datetime.now().date()
    weekend = today + timedelta(days=(5 - today.weekday()) % 7)  # –ë–ª–∏–∂–∞–π—à–∞—è –ø—è—Ç–Ω–∏—Ü–∞

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üöÄ –°–µ–≥–æ–¥–Ω—è-–ó–∞–≤—Ç—Ä–∞",
            callback_data=f"express_book_{room_id}_{today}_{today + timedelta(days=1)}"
        )],
        [InlineKeyboardButton(
            text="üéâ –ë–ª–∏–∂–∞–π—à–∏–µ –≤—ã—Ö–æ–¥–Ω—ã–µ",
            callback_data=f"express_book_{room_id}_{weekend}_{weekend + timedelta(days=2)}"
        )],
        [InlineKeyboardButton(
            text="üìÖ –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—ã –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ",
            callback_data=f"calendar_book_{room_id}"
        )],
        [InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data=f"room_{room_id}"
        )]
    ])

    await callback.message.answer(
        f"‚ö° –ë—ã—Å—Ç—Ä–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n"
        f"üõè {room.name}\n"
        f"üí∞ {room.price_per_night:,.0f} —Å—É–º/–Ω–æ—á—å (–±—É–¥–Ω–∏)\n"
        f"üí∞ {getattr(room, 'weekend_price', room.price_per_night):,.0f} —Å—É–º/–Ω–æ—á—å (–≤—ã—Ö–æ–¥–Ω—ã–µ)\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
        reply_markup=keyboard
    )
    await callback.answer()


# –≠–∫—Å–ø—Ä–µ—Å—Å-–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
@router.callback_query(lambda c: c.data and c.data.startswith("express_book_"))
async def express_booking(callback: CallbackQuery, session: AsyncSession):
    logger.info(f"Express booking: {callback.data}")

    parts = callback.data.split("_")
    room_id = int(parts[2])
    check_in = datetime.fromisoformat(parts[3]).date()
    check_out = datetime.fromisoformat(parts[4]).date()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    is_available = await check_room_availability(
        session, room_id,
        check_in.isoformat(),
        check_out.isoformat()
    )

    if not is_available:
        await callback.answer("‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–æ–º–µ—Ä –∑–∞–Ω—è—Ç –Ω–∞ —ç—Ç–∏ –¥–∞—Ç—ã", show_alert=True)
        return

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
    room = await get_room(session, room_id)
    nights = (check_out - check_in).days

    # –°—á–∏—Ç–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏
    weekend_nights = 0
    current = check_in
    while current < check_out:
        if current.weekday() in [4, 5, 6]:  # –ü—Ç, –°–±, –í—Å
            weekend_nights += 1
        current += timedelta(days=1)

    weekday_nights = nights - weekend_nights

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º getattr –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ weekend_price
    weekend_price = getattr(room, 'weekend_price', room.price_per_night)
    total_price = (weekday_nights * room.price_per_night) + (weekend_nights * weekend_price)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üìù –ó–∞–≤–µ—Ä—à–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
            web_app=WebAppInfo(url=f"{WEBAPP_URL}?room_id={room_id}&check_in={check_in}&check_out={check_out}")
        )],
        [InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data=f"room_{room_id}"
        )]
    ])

    await callback.message.answer(
        f"‚úÖ –ù–æ–º–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω!\n\n"
        f"üìã –î–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
        f"üõè {room.name}\n"
        f"üìÖ –ó–∞–µ–∑–¥: {check_in.strftime('%d.%m.%Y')}\n"
        f"üìÖ –í—ã–µ–∑–¥: {check_out.strftime('%d.%m.%Y')}\n"
        f"üåô –ù–æ—á–µ–π: {nights} (–±—É–¥–Ω–∏: {weekday_nights}, –≤—ã—Ö–æ–¥–Ω—ã–µ: {weekend_nights})\n"
        f"üí∞ –ò—Ç–æ–≥–æ: {total_price:,.0f} —Å—É–º\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=keyboard
    )
    await callback.answer()


# Handler for unknown messages
@router.message()
async def unknown_message(message: Message):
    logger.info(f"Unknown message from user {message.from_user.id}: {message.text}")

    await message.answer(
        "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é.",
        reply_markup=main_keyboard()
    )