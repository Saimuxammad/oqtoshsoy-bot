from aiogram import F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from app.bot.singleton_router import get_router
from app.bot.keyboards import main_keyboard, rooms_keyboard, room_detail_keyboard, support_keyboard
from app.database.crud import (
    get_user_by_telegram_id, create_user, get_all_rooms,
    get_room, get_room_reviews, get_or_create_user
)
from app.database.models import User

# Get the singleton router instance
router = get_router()


# Handler for /start command
@router.message(Command("start"))
async def cmd_start(message: Message, session: AsyncSession):
    # Check if user exists in the database or create a new one
    user = await get_or_create_user(
        session,
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )

    await message.answer(
        f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}!\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∫—É—Ä–æ—Ä—Ç–∞ ¬´Oqtoshsoy¬ª.\n\n"
        f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—à–µ–º –∫—É—Ä–æ—Ä—Ç–µ, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–º–µ—Ä–∞, "
        f"–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ, –∞ —Ç–∞–∫–∂–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
        reply_markup=main_keyboard()
    )


# Handler for "About Resort" button
@router.message(F.text == "üè® –û –∫—É—Ä–æ—Ä—Ç–µ")
async def about_resort(message: Message):
    await message.answer(
        "üè® *–ö—É—Ä–æ—Ä—Ç ¬´Oqtoshsoy¬ª*\n\n"
        "–ù–∞—à –∫—É—Ä–æ—Ä—Ç —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –≤ –∂–∏–≤–æ–ø–∏—Å–Ω–æ–º –≥–æ—Ä–Ω–æ–º —É—â–µ–ª—å–µ, –≤ 120 –∫–º –æ—Ç –≥–æ—Ä–æ–¥–∞ –¢–∞—à–∫–µ–Ω—Ç.\n\n"
        "üìç *–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ*: –¢–∞—à–∫–µ–Ω—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –ë–æ—Å—Ç–∞–Ω–ª—ã–∫—Å–∫–∏–π —Ä–∞–π–æ–Ω\n"
        "üèî *–í—ã—Å–æ—Ç–∞ –Ω–∞–¥ —É—Ä–æ–≤–Ω–µ–º –º–æ—Ä—è*: 1200 –º\n"
        "üå° *–ö–ª–∏–º–∞—Ç*: –ì–æ—Ä–Ω—ã–π, —É–º–µ—Ä–µ–Ω–Ω—ã–π\n\n"
        "–ù–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –∫—É—Ä–æ—Ä—Ç–∞:\n"
        "- –û—Ç–∫—Ä—ã—Ç—ã–π –∏ –∑–∞–∫—Ä—ã—Ç—ã–π –±–∞—Å—Å–µ–π–Ω—ã\n"
        "- –†–µ—Å—Ç–æ—Ä–∞–Ω —Å –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∏ –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–π –∫—É—Ö–Ω–µ–π\n"
        "- SPA-—Ü–µ–Ω—Ç—Ä\n"
        "- –î–µ—Ç—Å–∫–∞—è –ø–ª–æ—â–∞–¥–∫–∞\n"
        "- –ó–æ–Ω—ã –¥–ª—è –ø–∏–∫–Ω–∏–∫–∞\n\n"
        "–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –∫—Ä—É–≥–ª—ã–π –≥–æ–¥ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∏–¥—ã –æ—Ç–¥—ã—Ö–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–µ–∑–æ–Ω–∞.",
        parse_mode="Markdown"
    )


# Handler for "Rooms" button
@router.message(F.text == "üõèÔ∏è –ù–æ–º–µ—Ä–∞")
async def show_rooms(message: Message, session: AsyncSession):
    # Get rooms with await
    rooms = await get_all_rooms(session)

    await message.answer(
        "üõèÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–º–µ—Ä–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:*",
        reply_markup=rooms_keyboard(rooms),
        parse_mode="Markdown"
    )


# Handler for room selection
@router.callback_query(lambda c: c.data and c.data.startswith("room_"))
async def room_details(callback: CallbackQuery, session: AsyncSession):
    room_id = int(callback.data.split("_")[1])
    room = await get_room(session, room_id)

    if not room:
        await callback.answer("–ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –§–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã: –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è –±—É–¥–Ω–∏—Ö –∏ –≤—ã—Ö–æ–¥–Ω—ã—Ö
    price_text = f"{room.price_per_night}‚ÇΩ"

    # Create room description text
    text = (
        f"üõèÔ∏è *{room.name}*\n\n"
        f"*–¢–∏–ø*: {room.room_type}\n"
        f"*–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å*: {room.capacity} —á–µ–ª.\n"
        f"*–¶–µ–Ω–∞ –∑–∞ –Ω–æ—á—å*: {price_text}\n\n"
        f"{room.description}\n\n"
        f"*–í–∫–ª—é—á–µ–Ω–æ*:\n"
        f"- –ó–∞–≤—Ç—Ä–∞–∫\n"
        f"- 1 —á–∞—Å –¥–µ—Ç—Å–∫–∞—è –ø–ª–æ—â–∞–¥–∫–∞\n\n"
        f"*–í—Ä–µ–º—è –∑–∞–µ–∑–¥–∞*: 14:00\n"
        f"*–í—Ä–µ–º—è –≤—ã–µ–∑–¥–∞*: 12:00\n\n"
        f"–î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
    )

    # Send photo with room if image exists
    if room.image_url:
        await callback.message.answer_photo(
            photo=room.image_url,
            caption=text,
            reply_markup=room_detail_keyboard(room.id),
            parse_mode="Markdown"
        )
    else:
        await callback.message.answer(
            text=text,
            reply_markup=room_detail_keyboard(room.id),
            parse_mode="Markdown"
        )

    await callback.answer()


# Handler for "Contact Support" button
@router.message(F.text == "üìû –°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")
async def contact_support(message: Message):
    await message.answer(
        "üìû –°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –æ–¥–Ω–∏–º –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–ø–æ—Å–æ–±–æ–≤:\n\n"
        "‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: +99890 096 50 55\n"
        "‚úâÔ∏è Telegram: @Oqtosh_Soy",
        reply_markup=support_keyboard(),
        parse_mode=None  # –û—Ç–∫–ª—é—á–∞–µ–º Markdown
    )


# Handler for phone number display
@router.callback_query(F.data == "phone_number")
async def show_phone_number(callback: CallbackQuery):
    await callback.answer("–¢–µ–ª–µ—Ñ–æ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: +99890 096 50 55")

@router.callback_query(F.data == "call_support")
async def call_support(callback: CallbackQuery):
    await callback.message.answer(
        "üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞–º –ø–æ –Ω–æ–º–µ—Ä—É:\n"
        "+99890 096 50 55\n\n"
        "–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: 9:00 - 18:00 (–ü–ù-–°–ë)",
        parse_mode=None  # –û—Ç–∫–ª—é—á–∞–µ–º Markdown
    )
    await callback.answer()


# Handler for "Reviews" button
@router.message(F.text == "‚≠ê –û—Ç–∑—ã–≤—ã")
async def show_reviews(message: Message, session: AsyncSession):
    await message.answer(
        "‚≠ê *–û—Ç–∑—ã–≤—ã –æ –∫—É—Ä–æ—Ä—Ç–µ*\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –≥–æ—Å—Ç–µ–π –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –æ—Ç–∑—ã–≤.\n\n"
        "–ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞—à–∏–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ –Ω–∞–ø—Ä—è–º—É—é –±–æ—Ç—É.",
        parse_mode="Markdown"
    )


# Handler for returning to main menu
@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery):
    await callback.message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=main_keyboard()
    )
    await callback.message.delete()
    await callback.answer()


# Handler for returning to rooms list
@router.callback_query(F.data == "back_to_rooms")
async def back_to_rooms(callback: CallbackQuery, session: AsyncSession):
    rooms = await get_all_rooms(session)
    await callback.message.answer(
        "üõèÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–º–µ—Ä–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:*",
        reply_markup=rooms_keyboard(rooms),
        parse_mode="Markdown"
    )
    await callback.message.delete()
    await callback.answer()


# Handler for room reviews
@router.callback_query(lambda c: c.data and c.data.startswith("reviews_"))
async def room_reviews(callback: CallbackQuery, session: AsyncSession):
    room_id = int(callback.data.split("_")[1])
    reviews = await get_room_reviews(session, room_id)
    room = await get_room(session, room_id)

    if not reviews:
        text = f"‚≠ê *–û—Ç–∑—ã–≤—ã –æ –Ω–æ–º–µ—Ä–µ \"{room.name}\"*\n\n–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –æ–± —ç—Ç–æ–º –Ω–æ–º–µ—Ä–µ."
    else:
        text = f"‚≠ê *–û—Ç–∑—ã–≤—ã –æ –Ω–æ–º–µ—Ä–µ \"{room.name}\"*\n\n"
        for review in reviews:
            stars = "‚≠ê" * review.rating
            text += f"{stars}\n{review.comment}\n\n"

    await callback.message.answer(
        text,
        reply_markup=room_detail_keyboard(room_id),
        parse_mode="Markdown"
    )
    await callback.answer()


# Handler for unknown messages
@router.message()
async def unknown_message(message: Message):
    await message.answer(
        "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é.",
        reply_markup=main_keyboard()
    )